Syntax:

																		
# In order to add a comment in python you need to use" #

3 ways to print text:

1.# Use Print('') for each line:
	Example:
		print('The capybara is the worlds largest rodent')
		print('the capybara likes to live in groups')

2.# \n = lets you to go down a row in the text:
	Example:
		print('The capybara is the worlds largest rodent \nThe capybara likes to live in groups')

3.# we you use 3 ''' (from both sides) then the output would be the same as you typed it.
	Example:
		print(''' the capbara lives in
		South America
		and i don think i can do it anymore''')

# In order to create a long string I can use the + sign.
# when adding \ before it is like saying: display this quote, it is not ending the string.
	Example:
		print('here is a double quote "' + "here is more'")
		print("or you can just do this \" does that work")
		print(" can i just print a \ in the string?")
		print("But what if I want \news in the strings?")

# If am inserting a \\ so the \ appears correctly in the string
	Example:
		print("But what if I want \\news in the sting?")
		
		
- If i want to create space between the  Question and the print i can add \n inside the first word in print.
	Example:
		name = input('What is your name? ')
		country = input('What country do you live in? ')
		country = country.upper()
		print('\nHellon, ' + name + '. You Live in ' + country)
____________________________________________________________________________________________________________________________
Values:

# The input function allows you to specify a message to display and returns the value typed in by the user.
# We use a vriable to remember the value entered by the user.
# We called our variable "name" but you can call it just about anything as long the variable name does not contain spaces.
	Example:
		name = input("what is your name? ")
		print(name)

Variable = a "box", "Place holder" where you can store something and come back to get it later.
206-x = 42
in this case the "x" is a place holder for 164
	Example:

		#Collect name from the user
		name = input("what is your name? ")
		#Display the name
		print(name)
		#Update the value
		name = 'Yuval Shoef'
		print(name)

Variable Rules:
- Can not contain spaces
- Are case sensitive
	* firstName and firstname would be two different variables
- Cannot start with a number

Variable Guidelines:
- Should be descriptive but not too long (facoriteSign and not yourFavoriteSignInTheHoroscope)
- Using a casing "scheme"
	* camelCasing or PascalCasing
	
Manipulating Variables:

Example:
firstName= input("What is your name? ")
lastName= input("What is your last name? ")
# In order to create spaces between the variables we can add + "(with space in between)" +
print("Hello " + firstName + " " + lastName)

Content manipulate:
- If I want to change the content from lower to upper case I will use:
	Example:
		message = 'Hello World'
		print(message.lower())
		print(message.upper())
		print(message.swapcase())
	- the "message" before the "=" is a variable which can been anything I want.
	
Lower, upper and swapcase are different string functions.
 Functions - will do something for us change the latters size/font etc.
 
 IntelliSense - Is when you type a function and the program suggest the possible function for that you can call automatically after you type "."
 
 	Example:
		#Variables setup - set all the variables a head and give them meanings before you write down the code.
		girldescription = " "
		boydescription = " "
		walkdescription = " "
		girlname = " "
		boyname = " "
		animal = " "
		gift = " "
		answer = " "

		#Ask the user to specify values for the variables
		
		girlname = input("Enter a girl's name: ")
		boyname =input("Enter a boy's name: ")
		animal = input("Name a type of animal to ride on: ")
		girldescription = input("How would you describe a flower? ")
		boydescription = input("How would you describe a car? ")
		walkdescription = input("Enter a description of how you would walk:")
		answer = input("What would you accept free food?(Yes/No) ")

		#Display the story, Don't forget to format the strings when they are displayed
		
		print("\nOnce upon a time, ")
		print("There was a pretty girl named " + girlname.capitalize() + " <3.")
		print("One day, " + girlname.capitalize() + " was walking " + walkdescription.lower() +" down the street. ")
		print("Then she met an " + boydescription.lower() + " boy named " + boyname.capitalize() + ".")
		print(boyname.capitalize() + " then asked " + girlname.capitalize() + " to eat pizza with him. ")
		print(girlname.capitalize() + " answerd " + answer.capitalize() + ", " + boyname.capitalize() + ". \nAnd they went to eat pizza until the very next day.")
		print("On the second date " + boyname.capitalize() + " asked " + girlname.capitalize() + " would you like riding a horse with me? " + animal.capitalize() )
		print("And they both rode away on a " + animal.lower() + " and lived happliy ever after. <3 <3 <3")
		
		
____________________________________________________________________________________________________________________________
Numbers - 
Symbol	Operation	Operation
+  	Addition	5+2 = 7 
-  	Subtraction  	5-2 = 3
* 	Multiplication	5*2 = 10
/     	Division   	5/2 = 2.5
** 	Exponent 	5**2 = 25
% 	Modulo	5%2 = 1
 
In Python, string formatters are essentially placeholders that let us pass in different values into some formatted string.
Syntax	  	Output
print('I have %d cats' % 6)	I have 6 cats
print('I have %3d cats' % 6)	 	I have    6 cats
print('I have %03d cats' % 6)	I have 006 cats
print('I have %f cats' % 6)	I have 6.000000 cats
print('I have %.2f cats' % 6)	I have 6.00 cats
          
AND you I can also use:
Syntax	Output
print("I have {0:d} cats".format(6))	I have 6 cats
print("I have {0:3d} cats".format(6))	I have    6 cats
print("I have {0:03d} cats".format(6)) 	I have 006 cats
print("I have {0:f} cats".format(6))	I have 6.000000 cats
print("I have {0:.2f} cats".format(6))	I have 6.00 cats

The %d formatter is used to input decimal values, or whole numbers. If you provide a float value, it will convert it to a whole number, by truncating the values after the decimal point
%d - I would place it where the value should be and place a "%" next to the value that should be there.
 	Example:
		area = 0
		height = 10
		width = 20
		area = width * height /2
		print("The area of the triangle would be %d " % area)

The %f formatter is used to input float values, or numbers with values after the decimal place. This formatter allows us to specify a number of decimal places to round the values by.
 	Example:
		number = 3.1415
		print ("%f" % number)	
		# You might see this output 3.1415000,
		# due to how the float values are stored
		print ("%.3f" % number) - In case there are any more numbers after the "." you can choose how many would it show by placing "%.(the amount of numbers it would show)f"
		# 3.142
		# When specifying to a number of decimal places

There are functions to convert from one datatype to another.
	Example:
		int(value) 	converts to an integer
		long(value) 	converts to a long integer
		float(value) 	converts to a floating number 
			(i.e. a number that can hold decimal places)
		str(value) 	converts to a string

____________________________________________________________________________________________________________________________
Import and Libraries - Date and Time

Import Example:
		import datetime

		currentDate = datetime.date.today()
		print(currentDate)
		# I can also access different parts of the date:
		print(currentDate.year)
		print(currentDate.month)
		print(currentDate.day)

Dates format:
print(currentDate.strftime('%d %b, %Y')) - shows - 04 Feb, 2022
currentDate = datetime.date.today() - shows - 2022-02-04
link - https://strftime.org/


Subtract days from dates:

	Example:
	import datetime                                                     
		userInput = input('Please enter your birthday? (dd/mm/yyyy) ')      
		birthday = datetime.datetime.strptime(userInput, '%d/%m/%Y').date() 
		print(birthday)                                                       
		days = birthday - currentDate                                       
		print(days.days)                                                    
Useful webs:
http://labix.org/python-dateutil
https://babel.pocoo.org/en/latest/

___________________________________________________________________________________________________________________________
If Statements 

allows you to specify code that only executes if a specific condition is Ture.
	Example:
		answer=input("Would you like express shipping?")
		if answer == "yes" :
			print("That would be an extra 10$.")

eilf / else

In "if" statement you can create multiply "if" by using "elif" (elif = else + if)
	Example:
answer=input("Would you like express shipping?")
if answer == "yes" :
    print("That would be an extra 10$.")
elif answer == "no" :
    print("Great!")
else:
    print("Yes/No Only :)")

elif has to be under "if" statement and in case you want to print something that is not in the "if" statement you can write "else:" and print what you want.

	Example:
		ShippingCharge = 0
		ShoperCharge = float(input("Enter your total purchase "))
		if ShoperCharge < 50 :
    			print(ShoperCharge + 10)
		else:
    			print("Shipping is FREE!")
		print("Your total cost is " + str( ShoperCharge))
		
		
		Pass
The pass statement is used as a placeholder for future code.
When the pass statement is executed, nothing happens, but you avoid getting an error when empty code is not allowed.
Empty code is not allowed in loops, function definitions, class definitions, or in if statements.
This function ends the loop.
סט הוא אוסף לא מסודר של פריטים. 
כל רכיב קבוצה הוא ייחודי (ללא כפילויות) וחייב להיות בלתי ניתן לשינוי (לא ניתן לשנות). עם זאת, קבוצה עצמה ניתנת לשינוי. אנחנו יכולים להוסיף או להסיר ממנו פריטים. 
ניתן להשתמש בקבוצות גם לביצוע פעולות סט מתמטיות כמו איחוד, צומת, הבדל סימטרי וכו'.
Example:
	a = 33
	b = 200
	
	if b > a:
	  pass
	Else:
		Print("nice!")

		

___________________________________________________________________________________________________________________________

And / Or Statements

And

When you use "and" you are saying all the conditions must be true.


Or

When you use "or" you are saying please do the following if either condition is true 


---you can only use one "and" and one "or" in a statement---
																	
Example:
team = input("Enter your favorite hocket team: ").upper()
sport = input("Enter your favorite sport: ").upper()

if sport == "HOCKEY" and team == "RANGERS" :
    print("I miss soka mama")
elif team == "LEAFS" or team == "SENATORS" :
    print("GL zain")
else:
    print("rotev s")



Those statements allows you to ask the user few questions and based on the user Input there will be a different output for each answer he puts.

You can combine multiple "and"/"or" in a single if statement
Example:
if month == "Sep" or month == "Apr" \
or month == "Jun" or month == "Nov":
    print("There are 30 days in this month")

If favMovie == "Star Wars" \
and favBook == "Lord of the Rings" \
and favEvent == "Comicon":
    print("You an I should hang out")


You cab also combine "and"/"or" in a single statemen.
 
country = input('fav county? ')
pet = input('fav pet? ')
if country == "CANADA" and \
    pet == "MOOSE" or pet == "BEAVER" :
        print("Do you play hockey too?")


In order to use both "and" and "or" and create a false answer you can use () and not include the "and" inside them to create 2 parts

	Example:
	team = input('Enter you fav hockey team: ').upper()
	sport = input('Enter your fav sport: ').upper()
	
	if sport == 'HOCKEY' and (team == 'SENATORS' or team == 'LEAFS') :
	        print('Good luck getting to cup next year')
	
	
	

Test everything and make your code easy as possible .

Challenge - Taxes
#Declare and initialize your variables
country = ""
province = ""
orderTotal = 0
totalWithTax = 0

#I am declaring variables to hold the tax values used in the calculations
#That way if a tax rate changes, I only have to change it in one place instead
#of searching through my code to see where I had a specific numeric value and updating it
GST = .05  
HST = .13
PST = .06

#Ask the user what country they are from 
country = input("What country are you from? " )

#if they are from Canada ask which province...don't forget they may enter Canada as CANADA, Canada, canada, CAnada
#so convert the string to lowercase before you do the comparison

if country.lower() == "canada" :
    province = input("Which province are you from? ")

#ask for the order total
orderTotal = float(input("What is your order total? "))

#Now add the taxes
#first check if they are from canada
if country.lower() == "canada" :
    #if they are from canada, we have to change the calculation based on the province they specified
    if province.lower() == "alberta" :
        orderTotal = orderTotal + orderTotal * GST
    elif province.lower() == "ontario" or province.lower() == "new brunswick" or province.lower() == "nova scotia" :
        orderTotal = orderTotal + orderTotal * HST
    else :
        orderTotal = orderTotal + orderTotal * PST + orderTotal * GST
#if they are not from Canada there is no tax, so the amount they entered is the total with tax
#and no modification to orderTotal is required

#Now display the total with taxes to the user, don't forget to format the number
print("Your total including taxes comes to $%.2f " % orderTotal)



___________________________________________________________________________________________________________________________


Loops

Some times we need to preform an action more than once.
Inside of using the same 2 lines of code over and over we can use loops which would make it more efficient.
Example:

import turtle
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.right(90)
turtle.forward(100)
turtle.right(90)

And that would print a square.;
Instead of using it like that we can use a loop and it would look like that:
Example:

import turtle
for steps in range(4):
    turtle.forward(100)
    turtle.right(90)
 
And that would give the same output.


Challenge - Create a shape

#Import the turtle library
import turtle

#Declare your variables
nbrSides = 0 # Ask user how many sides they want for their object
lengthOfLine = 80 # The size of the shape

#Don't forget to convert that value into a integer
#if you convert to float the for loop will give you an error because range values must be integers
nbrSides = int(input("How many sides do you want on your object? " ))

#Create a loop to draw the object
for side in range(0,nbrSides) :
    turtle.forward(lengthOfLine)
    #the angle to turn depends on the number of sides of the object
    turtle.right(360/nbrSides)

    #This is the double bonus challenge, a nested loop that draws a smaller version of the object inside
    for side in range(0,nbrSides) :
        turtle.forward(lengthOfLine/2)
        turtle.right(360/nbrSides)
___________________________________________________________________________________________________________________________
While 

Python has two primitive loop commands:

	• While - loops
	• for - loops
	
	
The while Loop
With the while loop we can execute a set of statements as long as a condition is true.

Example:
i = 1
while i < 6:
  print(i)
  i += 1

The while loop requires relevant variables to be ready, in this example we need to define an indexing variable, i, which we set to 1.

The break Statement
With the break statement we can stop the loop even if the while condition is true:

Example:
i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

The continue Statement
With the continue statement we can stop the current iteration, and continue with the next:

Example:
i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

The else Statement
With the else statement we can run a block of code once when the condition no longer is true:

Example:
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

___________________________________________________________________________________________________________________________
Lists


Lists are used to store multiple items in a single variable.

Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.

Tuple - 
Tuples are used to store multiple items in a single variable.
A tuple is a collection which is ordered and unchangeable.
Tuples are written with round brackets.
Tuples are something that are permeant and can not be changed. 

Set -
Sets are used to store multiple items in a single variable.
A set is a collection which is unordered, unchangeable*, and unindexed.
Set items are unchangeable, but you can remove items and add new items.
Sets are written with curly brackets.

Dictionary - 
Dictionaries are used to store data values in key:value pairs.
A dictionary is a collection which is ordered*, changeable and do not allow duplicates.
As of Python version 3.7, dictionaries are ordered. In Python 3.6 and earlier, dictionaries are unordered.
Dictionaries are written with curly brackets, and have keys and values:




Lists are created using square brackets.
 
Example:
thislist = ["apple", "banana", "cherry"]
print(thislist)

Change the list order - 
In order to change to change the order of the list we can use this.

Example:

thislist = ["apple", "banana", "cherry"]
thislist[0] = "blackcurrant"

print(thislist)

Adding to list - 

In order to add a variable to a list we will use list-name.append = what we want to add.

Example:

thislist = ["apple", "banana", "cherry"]

thislist.append("orange")

print(thislist)

___________________________________________________________________________________________________________________________
Constructor
 https://iw.helpr.me/11624-what-are-constructors-and-destructors-in-python

Constructor - 
Constructors are generally used for instantiating an object. The task of constructors is to initialize(assign values) to the data members of the class when an object of the class is created. 
In Python the __init__() method is called the constructor and is always called when an object is created.

Example: 
class GeekforGeeks:

	# default constructor
	def __init__(self):
		self.geek = "GeekforGeeks"

	# a method for printing data members
	def print_Geek(self):
		print(self.geek)


# creating object of the class
obj = GeekforGeeks()

# calling the instance method using the object obj
obj.print_Geek()



___________________________________________________________________________________________________________________________
Self
The self Parameter

The self parameter is built in python which means that no matter where you place the self parameter Python would read it first and then read the rest of the code.

The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class.

Example:

class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()


__init__ is the constructor for a class. The self parameter refers to the instance of the object . 
Your x and y parameters would be stored in variables on the stack and would be discarded when the __init__ method goes out of scope.



___________________________________________________________________________________________________________________________
Def

A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

A function can return data as a result.

In Python a function is defined using the def keyword.

Example:

def my_function():
  print("Hello from a function")

Calling a Function
To call a function, use the function name followed by parenthesis.

Example:
def my_function():
  print("Hello from a function")

my_function()

Arguments
Information can be passed into functions as arguments.

Arguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.

The following example has a function with one argument (fname). When the function is called, we pass along a first name, which is used inside the function to print the full name.

Example:

def my_function(fname):
  print(fname + " Refsnes")

my_function("Emil")
my_function("Tobias")
my_function("Linus")



Files

	•  open(path,"perms") - open the file (path - type the specific file path, set the permissions r(read) or w+(write and read)
	• 
	•  read(), read(size) - lets you read the file (let you choose how many bytes to read from the file)
	• 
	•  readline -returns one line from the file
	• 
	•  write - lets you write into the file from the terminal.
	• 
	•  close - closes the file 
	• 
	
	•  seek - sets where you start reading the file
	• 
	


yuval was here


